### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Address {
  areaCode: Int!
  createdAt: DateTime!
  id: String!
  lga: String!
  state: String!
  street1: String!
  street2: String
  updatedAt: DateTime!
}

input AddressCreateInput {
  areaCode: Int!
  createdAt: DateTime
  DefaultAddress: DefaultAddressCreateManyWithoutAddressInput
  id: String
  lga: String!
  Order: OrderCreateManyWithoutDeliveryAddressInput
  state: String!
  street1: String!
  street2: String
  updatedAt: DateTime
  user: UserCreateOneWithoutAddressesInput!
}

input AddressCreateManyWithoutUserInput {
  connect: [AddressWhereUniqueInput!]
  create: [AddressCreateWithoutUserInput!]
}

input AddressCreateOneWithoutDefaultAddressInput {
  connect: AddressWhereUniqueInput
  create: AddressCreateWithoutDefaultAddressInput
}

input AddressCreateOneWithoutOrderInput {
  connect: AddressWhereUniqueInput
  create: AddressCreateWithoutOrderInput
}

input AddressCreateWithoutDefaultAddressInput {
  areaCode: Int!
  createdAt: DateTime
  id: String
  lga: String!
  Order: OrderCreateManyWithoutDeliveryAddressInput
  state: String!
  street1: String!
  street2: String
  updatedAt: DateTime
  user: UserCreateOneWithoutAddressesInput!
}

input AddressCreateWithoutOrderInput {
  areaCode: Int!
  createdAt: DateTime
  DefaultAddress: DefaultAddressCreateManyWithoutAddressInput
  id: String
  lga: String!
  state: String!
  street1: String!
  street2: String
  updatedAt: DateTime
  user: UserCreateOneWithoutAddressesInput!
}

input AddressCreateWithoutUserInput {
  areaCode: Int!
  createdAt: DateTime
  DefaultAddress: DefaultAddressCreateManyWithoutAddressInput
  id: String
  lga: String!
  Order: OrderCreateManyWithoutDeliveryAddressInput
  state: String!
  street1: String!
  street2: String
  updatedAt: DateTime
}

input AddressFilter {
  every: AddressWhereInput
  none: AddressWhereInput
  some: AddressWhereInput
}

input AddressMineCompoundUniqueInput {
  id: String!
  userId: String!
}

input AddressScalarWhereInput {
  AND: [AddressScalarWhereInput!]
  areaCode: IntFilter
  createdAt: DateTimeFilter
  DefaultAddress: DefaultAddressFilter
  id: StringFilter
  lga: StringFilter
  NOT: [AddressScalarWhereInput!]
  OR: [AddressScalarWhereInput!]
  Order: OrderFilter
  state: StringFilter
  street1: StringFilter
  street2: NullableStringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input AddressUpdateInput {
  areaCode: Int
  createdAt: DateTime
  DefaultAddress: DefaultAddressUpdateManyWithoutAddressInput
  id: String
  lga: String
  Order: OrderUpdateManyWithoutDeliveryAddressInput
  state: String
  street1: String
  street2: String
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutAddressesInput
}

input AddressUpdateManyDataInput {
  areaCode: Int
  createdAt: DateTime
  id: String
  lga: String
  state: String
  street1: String
  street2: String
  updatedAt: DateTime
}

input AddressUpdateManyWithoutUserInput {
  connect: [AddressWhereUniqueInput!]
  create: [AddressCreateWithoutUserInput!]
  delete: [AddressWhereUniqueInput!]
  deleteMany: [AddressScalarWhereInput!]
  disconnect: [AddressWhereUniqueInput!]
  set: [AddressWhereUniqueInput!]
  update: [AddressUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [AddressUpdateManyWithWhereNestedInput!]
  upsert: [AddressUpsertWithWhereUniqueWithoutUserInput!]
}

input AddressUpdateManyWithWhereNestedInput {
  data: AddressUpdateManyDataInput!
  where: AddressScalarWhereInput!
}

input AddressUpdateOneRequiredWithoutDefaultAddressInput {
  connect: AddressWhereUniqueInput
  create: AddressCreateWithoutDefaultAddressInput
  update: AddressUpdateWithoutDefaultAddressDataInput
  upsert: AddressUpsertWithoutDefaultAddressInput
}

input AddressUpdateOneWithoutOrderInput {
  connect: AddressWhereUniqueInput
  create: AddressCreateWithoutOrderInput
  delete: Boolean
  disconnect: Boolean
  update: AddressUpdateWithoutOrderDataInput
  upsert: AddressUpsertWithoutOrderInput
}

input AddressUpdateWithoutDefaultAddressDataInput {
  areaCode: Int
  createdAt: DateTime
  id: String
  lga: String
  Order: OrderUpdateManyWithoutDeliveryAddressInput
  state: String
  street1: String
  street2: String
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutAddressesInput
}

input AddressUpdateWithoutOrderDataInput {
  areaCode: Int
  createdAt: DateTime
  DefaultAddress: DefaultAddressUpdateManyWithoutAddressInput
  id: String
  lga: String
  state: String
  street1: String
  street2: String
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutAddressesInput
}

input AddressUpdateWithoutUserDataInput {
  areaCode: Int
  createdAt: DateTime
  DefaultAddress: DefaultAddressUpdateManyWithoutAddressInput
  id: String
  lga: String
  Order: OrderUpdateManyWithoutDeliveryAddressInput
  state: String
  street1: String
  street2: String
  updatedAt: DateTime
}

input AddressUpdateWithWhereUniqueWithoutUserInput {
  data: AddressUpdateWithoutUserDataInput!
  where: AddressWhereUniqueInput!
}

input AddressUpsertWithoutDefaultAddressInput {
  create: AddressCreateWithoutDefaultAddressInput!
  update: AddressUpdateWithoutDefaultAddressDataInput!
}

input AddressUpsertWithoutOrderInput {
  create: AddressCreateWithoutOrderInput!
  update: AddressUpdateWithoutOrderDataInput!
}

input AddressUpsertWithWhereUniqueWithoutUserInput {
  create: AddressCreateWithoutUserInput!
  update: AddressUpdateWithoutUserDataInput!
  where: AddressWhereUniqueInput!
}

input AddressWhereInput {
  AND: [AddressWhereInput!]
  areaCode: IntFilter
  createdAt: DateTimeFilter
  DefaultAddress: DefaultAddressFilter
  id: StringFilter
  lga: StringFilter
  NOT: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  Order: OrderFilter
  state: StringFilter
  street1: StringFilter
  street2: NullableStringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input AddressWhereUniqueInput {
  addressMine: AddressMineCompoundUniqueInput
  id: String
}

type AuthPayload {
  accessToken: String
  user: User
}

"""Use JavaScript Date object for date/time fields."""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

type DefaultAddress {
  address: Address!
  addressId: String!
  createdAt: DateTime!
  id: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

input DefaultAddressCreateManyWithoutAddressInput {
  connect: [DefaultAddressWhereUniqueInput!]
  create: [DefaultAddressCreateWithoutAddressInput!]
}

input DefaultAddressCreateOneWithoutUserInput {
  connect: DefaultAddressWhereUniqueInput
  create: DefaultAddressCreateWithoutUserInput
}

input DefaultAddressCreateWithoutAddressInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  user: UserCreateOneWithoutDefaultAddressInput!
}

input DefaultAddressCreateWithoutUserInput {
  address: AddressCreateOneWithoutDefaultAddressInput!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input DefaultAddressFilter {
  every: DefaultAddressWhereInput
  none: DefaultAddressWhereInput
  some: DefaultAddressWhereInput
}

input DefaultAddressScalarWhereInput {
  addressId: StringFilter
  AND: [DefaultAddressScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [DefaultAddressScalarWhereInput!]
  OR: [DefaultAddressScalarWhereInput!]
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input DefaultAddressUpdateManyDataInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input DefaultAddressUpdateManyWithoutAddressInput {
  connect: [DefaultAddressWhereUniqueInput!]
  create: [DefaultAddressCreateWithoutAddressInput!]
  delete: [DefaultAddressWhereUniqueInput!]
  deleteMany: [DefaultAddressScalarWhereInput!]
  disconnect: [DefaultAddressWhereUniqueInput!]
  set: [DefaultAddressWhereUniqueInput!]
  update: [DefaultAddressUpdateWithWhereUniqueWithoutAddressInput!]
  updateMany: [DefaultAddressUpdateManyWithWhereNestedInput!]
  upsert: [DefaultAddressUpsertWithWhereUniqueWithoutAddressInput!]
}

input DefaultAddressUpdateManyWithWhereNestedInput {
  data: DefaultAddressUpdateManyDataInput!
  where: DefaultAddressScalarWhereInput!
}

input DefaultAddressUpdateOneWithoutUserInput {
  connect: DefaultAddressWhereUniqueInput
  create: DefaultAddressCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: DefaultAddressUpdateWithoutUserDataInput
  upsert: DefaultAddressUpsertWithoutUserInput
}

input DefaultAddressUpdateWithoutAddressDataInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutDefaultAddressInput
}

input DefaultAddressUpdateWithoutUserDataInput {
  address: AddressUpdateOneRequiredWithoutDefaultAddressInput
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input DefaultAddressUpdateWithWhereUniqueWithoutAddressInput {
  data: DefaultAddressUpdateWithoutAddressDataInput!
  where: DefaultAddressWhereUniqueInput!
}

input DefaultAddressUpsertWithoutUserInput {
  create: DefaultAddressCreateWithoutUserInput!
  update: DefaultAddressUpdateWithoutUserDataInput!
}

input DefaultAddressUpsertWithWhereUniqueWithoutAddressInput {
  create: DefaultAddressCreateWithoutAddressInput!
  update: DefaultAddressUpdateWithoutAddressDataInput!
  where: DefaultAddressWhereUniqueInput!
}

input DefaultAddressWhereInput {
  address: AddressWhereInput
  addressId: StringFilter
  AND: [DefaultAddressWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [DefaultAddressWhereInput!]
  OR: [DefaultAddressWhereInput!]
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input DefaultAddressWhereUniqueInput {
  id: String
  userId: String
}

type DefaultMenu {
  createdAt: DateTime!
  id: String!
  menu: Menu!
  menuId: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

input DefaultMenuCreateOneWithoutMenuInput {
  connect: DefaultMenuWhereUniqueInput
  create: DefaultMenuCreateWithoutMenuInput
}

input DefaultMenuCreateOneWithoutUserInput {
  connect: DefaultMenuWhereUniqueInput
  create: DefaultMenuCreateWithoutUserInput
}

input DefaultMenuCreateWithoutMenuInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  user: UserCreateOneWithoutDefaultMenuInput!
}

input DefaultMenuCreateWithoutUserInput {
  createdAt: DateTime
  id: String
  menu: MenuCreateOneWithoutDefaultInput!
  updatedAt: DateTime
}

input DefaultMenuUpdateOneWithoutMenuInput {
  connect: DefaultMenuWhereUniqueInput
  create: DefaultMenuCreateWithoutMenuInput
  delete: Boolean
  disconnect: Boolean
  update: DefaultMenuUpdateWithoutMenuDataInput
  upsert: DefaultMenuUpsertWithoutMenuInput
}

input DefaultMenuUpdateOneWithoutUserInput {
  connect: DefaultMenuWhereUniqueInput
  create: DefaultMenuCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: DefaultMenuUpdateWithoutUserDataInput
  upsert: DefaultMenuUpsertWithoutUserInput
}

input DefaultMenuUpdateWithoutMenuDataInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutDefaultMenuInput
}

input DefaultMenuUpdateWithoutUserDataInput {
  createdAt: DateTime
  id: String
  menu: MenuUpdateOneRequiredWithoutDefaultInput
  updatedAt: DateTime
}

input DefaultMenuUpsertWithoutMenuInput {
  create: DefaultMenuCreateWithoutMenuInput!
  update: DefaultMenuUpdateWithoutMenuDataInput!
}

input DefaultMenuUpsertWithoutUserInput {
  create: DefaultMenuCreateWithoutUserInput!
  update: DefaultMenuUpdateWithoutUserDataInput!
}

input DefaultMenuWhereInput {
  AND: [DefaultMenuWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  menu: MenuWhereInput
  menuId: StringFilter
  NOT: [DefaultMenuWhereInput!]
  OR: [DefaultMenuWhereInput!]
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input DefaultMenuWhereUniqueInput {
  id: String
  userId: String
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

type LogoutResponse {
  accessToken: String
}

type Meal {
  createdAt: DateTime!
  description: String!
  id: String!
  imageUrl: String!
  menus(after: MenuWhereUniqueInput, before: MenuWhereUniqueInput, first: Int, last: Int): [Menu!]!
  price: Float!
  tags: [String!]!
  title: String!
  updatedAt: DateTime!
  user: User!
}

input Meal_orderCompoundUniqueInput {
  mealId: String!
  orderId: String!
}

input MealCreateInput {
  createdAt: DateTime
  deletedAt: DateTime
  description: String!
  id: String
  imageUrl: String!
  menus: MenuCreateManyWithoutMealsInput
  orders: MealOrderCreateManyWithoutMealInput
  price: Float!
  tags: MealCreatetagsInput
  title: String!
  updatedAt: DateTime
  user: UserCreateOneWithoutMealsInput!
}

input MealCreateManyWithoutMenusInput {
  connect: [MealWhereUniqueInput!]
  create: [MealCreateWithoutMenusInput!]
}

input MealCreateManyWithoutUserInput {
  connect: [MealWhereUniqueInput!]
  create: [MealCreateWithoutUserInput!]
}

input MealCreateOneWithoutOrdersInput {
  connect: MealWhereUniqueInput
  create: MealCreateWithoutOrdersInput
}

input MealCreatetagsInput {
  set: [String!]
}

input MealCreateWithoutMenusInput {
  createdAt: DateTime
  deletedAt: DateTime
  description: String!
  id: String
  imageUrl: String!
  orders: MealOrderCreateManyWithoutMealInput
  price: Float!
  tags: MealCreatetagsInput
  title: String!
  updatedAt: DateTime
  user: UserCreateOneWithoutMealsInput!
}

input MealCreateWithoutOrdersInput {
  createdAt: DateTime
  deletedAt: DateTime
  description: String!
  id: String
  imageUrl: String!
  menus: MenuCreateManyWithoutMealsInput
  price: Float!
  tags: MealCreatetagsInput
  title: String!
  updatedAt: DateTime
  user: UserCreateOneWithoutMealsInput!
}

input MealCreateWithoutUserInput {
  createdAt: DateTime
  deletedAt: DateTime
  description: String!
  id: String
  imageUrl: String!
  menus: MenuCreateManyWithoutMealsInput
  orders: MealOrderCreateManyWithoutMealInput
  price: Float!
  tags: MealCreatetagsInput
  title: String!
  updatedAt: DateTime
}

input MealFilter {
  every: MealWhereInput
  none: MealWhereInput
  some: MealWhereInput
}

input MealMineCompoundUniqueInput {
  id: String!
  userId: String!
}

type MealOrder {
  id: String!
  meal: Meal!
  mealId: String!
  order: Order!
  orderId: String!
}

input MealOrderCreateManyWithoutMealInput {
  connect: [MealOrderWhereUniqueInput!]
  create: [MealOrderCreateWithoutMealInput!]
}

input MealOrderCreateManyWithoutOrderInput {
  connect: [MealOrderWhereUniqueInput!]
  create: [MealOrderCreateWithoutOrderInput!]
}

input MealOrderCreateWithoutMealInput {
  createdAt: DateTime
  id: String
  order: OrderCreateOneWithoutMealsInput!
  quantity: Int
  updatedAt: DateTime
}

input MealOrderCreateWithoutOrderInput {
  createdAt: DateTime
  id: String
  meal: MealCreateOneWithoutOrdersInput!
  quantity: Int
  updatedAt: DateTime
}

input MealOrderFilter {
  every: MealOrderWhereInput
  none: MealOrderWhereInput
  some: MealOrderWhereInput
}

input MealOrderScalarWhereInput {
  AND: [MealOrderScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  mealId: StringFilter
  NOT: [MealOrderScalarWhereInput!]
  OR: [MealOrderScalarWhereInput!]
  orderId: StringFilter
  quantity: IntFilter
  updatedAt: DateTimeFilter
}

input MealOrderUpdateManyDataInput {
  createdAt: DateTime
  id: String
  quantity: Int
  updatedAt: DateTime
}

input MealOrderUpdateManyWithoutMealInput {
  connect: [MealOrderWhereUniqueInput!]
  create: [MealOrderCreateWithoutMealInput!]
  delete: [MealOrderWhereUniqueInput!]
  deleteMany: [MealOrderScalarWhereInput!]
  disconnect: [MealOrderWhereUniqueInput!]
  set: [MealOrderWhereUniqueInput!]
  update: [MealOrderUpdateWithWhereUniqueWithoutMealInput!]
  updateMany: [MealOrderUpdateManyWithWhereNestedInput!]
  upsert: [MealOrderUpsertWithWhereUniqueWithoutMealInput!]
}

input MealOrderUpdateManyWithoutOrderInput {
  connect: [MealOrderWhereUniqueInput!]
  create: [MealOrderCreateWithoutOrderInput!]
  delete: [MealOrderWhereUniqueInput!]
  deleteMany: [MealOrderScalarWhereInput!]
  disconnect: [MealOrderWhereUniqueInput!]
  set: [MealOrderWhereUniqueInput!]
  update: [MealOrderUpdateWithWhereUniqueWithoutOrderInput!]
  updateMany: [MealOrderUpdateManyWithWhereNestedInput!]
  upsert: [MealOrderUpsertWithWhereUniqueWithoutOrderInput!]
}

input MealOrderUpdateManyWithWhereNestedInput {
  data: MealOrderUpdateManyDataInput!
  where: MealOrderScalarWhereInput!
}

input MealOrderUpdateWithoutMealDataInput {
  createdAt: DateTime
  id: String
  order: OrderUpdateOneRequiredWithoutMealsInput
  quantity: Int
  updatedAt: DateTime
}

input MealOrderUpdateWithoutOrderDataInput {
  createdAt: DateTime
  id: String
  meal: MealUpdateOneRequiredWithoutOrdersInput
  quantity: Int
  updatedAt: DateTime
}

input MealOrderUpdateWithWhereUniqueWithoutMealInput {
  data: MealOrderUpdateWithoutMealDataInput!
  where: MealOrderWhereUniqueInput!
}

input MealOrderUpdateWithWhereUniqueWithoutOrderInput {
  data: MealOrderUpdateWithoutOrderDataInput!
  where: MealOrderWhereUniqueInput!
}

input MealOrderUpsertWithWhereUniqueWithoutMealInput {
  create: MealOrderCreateWithoutMealInput!
  update: MealOrderUpdateWithoutMealDataInput!
  where: MealOrderWhereUniqueInput!
}

input MealOrderUpsertWithWhereUniqueWithoutOrderInput {
  create: MealOrderCreateWithoutOrderInput!
  update: MealOrderUpdateWithoutOrderDataInput!
  where: MealOrderWhereUniqueInput!
}

input MealOrderWhereInput {
  AND: [MealOrderWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  meal: MealWhereInput
  mealId: StringFilter
  NOT: [MealOrderWhereInput!]
  OR: [MealOrderWhereInput!]
  order: OrderWhereInput
  orderId: StringFilter
  quantity: IntFilter
  updatedAt: DateTimeFilter
}

input MealOrderWhereUniqueInput {
  id: String
  meal_order: Meal_orderCompoundUniqueInput
}

input MealScalarWhereInput {
  AND: [MealScalarWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: NullableDateTimeFilter
  description: StringFilter
  id: StringFilter
  imageUrl: StringFilter
  menus: MenuFilter
  NOT: [MealScalarWhereInput!]
  OR: [MealScalarWhereInput!]
  orders: MealOrderFilter
  price: FloatFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input MealUpdateInput {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  id: String
  imageUrl: String
  menus: MenuUpdateManyWithoutMealsInput
  orders: MealOrderUpdateManyWithoutMealInput
  price: Float
  tags: MealUpdatetagsInput
  title: String
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutMealsInput
}

input MealUpdateManyDataInput {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  id: String
  imageUrl: String
  price: Float
  tags: MealUpdatetagsInput
  title: String
  updatedAt: DateTime
}

input MealUpdateManyWithoutMenusInput {
  connect: [MealWhereUniqueInput!]
  create: [MealCreateWithoutMenusInput!]
  delete: [MealWhereUniqueInput!]
  deleteMany: [MealScalarWhereInput!]
  disconnect: [MealWhereUniqueInput!]
  set: [MealWhereUniqueInput!]
  update: [MealUpdateWithWhereUniqueWithoutMenusInput!]
  updateMany: [MealUpdateManyWithWhereNestedInput!]
  upsert: [MealUpsertWithWhereUniqueWithoutMenusInput!]
}

input MealUpdateManyWithoutUserInput {
  connect: [MealWhereUniqueInput!]
  create: [MealCreateWithoutUserInput!]
  delete: [MealWhereUniqueInput!]
  deleteMany: [MealScalarWhereInput!]
  disconnect: [MealWhereUniqueInput!]
  set: [MealWhereUniqueInput!]
  update: [MealUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [MealUpdateManyWithWhereNestedInput!]
  upsert: [MealUpsertWithWhereUniqueWithoutUserInput!]
}

input MealUpdateManyWithWhereNestedInput {
  data: MealUpdateManyDataInput!
  where: MealScalarWhereInput!
}

input MealUpdateOneRequiredWithoutOrdersInput {
  connect: MealWhereUniqueInput
  create: MealCreateWithoutOrdersInput
  update: MealUpdateWithoutOrdersDataInput
  upsert: MealUpsertWithoutOrdersInput
}

input MealUpdatetagsInput {
  set: [String!]
}

input MealUpdateWithoutMenusDataInput {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  id: String
  imageUrl: String
  orders: MealOrderUpdateManyWithoutMealInput
  price: Float
  tags: MealUpdatetagsInput
  title: String
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutMealsInput
}

input MealUpdateWithoutOrdersDataInput {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  id: String
  imageUrl: String
  menus: MenuUpdateManyWithoutMealsInput
  price: Float
  tags: MealUpdatetagsInput
  title: String
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutMealsInput
}

input MealUpdateWithoutUserDataInput {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  id: String
  imageUrl: String
  menus: MenuUpdateManyWithoutMealsInput
  orders: MealOrderUpdateManyWithoutMealInput
  price: Float
  tags: MealUpdatetagsInput
  title: String
  updatedAt: DateTime
}

input MealUpdateWithWhereUniqueWithoutMenusInput {
  data: MealUpdateWithoutMenusDataInput!
  where: MealWhereUniqueInput!
}

input MealUpdateWithWhereUniqueWithoutUserInput {
  data: MealUpdateWithoutUserDataInput!
  where: MealWhereUniqueInput!
}

input MealUpsertWithoutOrdersInput {
  create: MealCreateWithoutOrdersInput!
  update: MealUpdateWithoutOrdersDataInput!
}

input MealUpsertWithWhereUniqueWithoutMenusInput {
  create: MealCreateWithoutMenusInput!
  update: MealUpdateWithoutMenusDataInput!
  where: MealWhereUniqueInput!
}

input MealUpsertWithWhereUniqueWithoutUserInput {
  create: MealCreateWithoutUserInput!
  update: MealUpdateWithoutUserDataInput!
  where: MealWhereUniqueInput!
}

input MealWhereInput {
  AND: [MealWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: NullableDateTimeFilter
  description: StringFilter
  id: StringFilter
  imageUrl: StringFilter
  menus: MenuFilter
  NOT: [MealWhereInput!]
  OR: [MealWhereInput!]
  orders: MealOrderFilter
  price: FloatFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input MealWhereUniqueInput {
  id: String
  mealMine: MealMineCompoundUniqueInput
}

type Menu {
  createdAt: DateTime!
  default: DefaultMenu
  id: String!
  meals(after: MealWhereUniqueInput, before: MealWhereUniqueInput, first: Int, last: Int): [Meal!]!
  menuDate: DateTime!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

input MenuCreateInput {
  createdAt: DateTime
  default: DefaultMenuCreateOneWithoutMenuInput
  id: String
  meals: MealCreateManyWithoutMenusInput
  menuDate: DateTime!
  SavedMenus: SavedMenusCreateManyWithoutMenuInput
  tags: MenuCreatetagsInput
  updatedAt: DateTime
  user: UserCreateOneWithoutMenusInput!
}

input MenuCreateManyWithoutMealsInput {
  connect: [MenuWhereUniqueInput!]
  create: [MenuCreateWithoutMealsInput!]
}

input MenuCreateManyWithoutUserInput {
  connect: [MenuWhereUniqueInput!]
  create: [MenuCreateWithoutUserInput!]
}

input MenuCreateOneWithoutDefaultInput {
  connect: MenuWhereUniqueInput
  create: MenuCreateWithoutDefaultInput
}

input MenuCreateOneWithoutSavedMenusInput {
  connect: MenuWhereUniqueInput
  create: MenuCreateWithoutSavedMenusInput
}

input MenuCreatetagsInput {
  set: [String!]
}

input MenuCreateWithoutDefaultInput {
  createdAt: DateTime
  id: String
  meals: MealCreateManyWithoutMenusInput
  menuDate: DateTime!
  SavedMenus: SavedMenusCreateManyWithoutMenuInput
  tags: MenuCreatetagsInput
  updatedAt: DateTime
  user: UserCreateOneWithoutMenusInput!
}

input MenuCreateWithoutMealsInput {
  createdAt: DateTime
  default: DefaultMenuCreateOneWithoutMenuInput
  id: String
  menuDate: DateTime!
  SavedMenus: SavedMenusCreateManyWithoutMenuInput
  tags: MenuCreatetagsInput
  updatedAt: DateTime
  user: UserCreateOneWithoutMenusInput!
}

input MenuCreateWithoutSavedMenusInput {
  createdAt: DateTime
  default: DefaultMenuCreateOneWithoutMenuInput
  id: String
  meals: MealCreateManyWithoutMenusInput
  menuDate: DateTime!
  tags: MenuCreatetagsInput
  updatedAt: DateTime
  user: UserCreateOneWithoutMenusInput!
}

input MenuCreateWithoutUserInput {
  createdAt: DateTime
  default: DefaultMenuCreateOneWithoutMenuInput
  id: String
  meals: MealCreateManyWithoutMenusInput
  menuDate: DateTime!
  SavedMenus: SavedMenusCreateManyWithoutMenuInput
  tags: MenuCreatetagsInput
  updatedAt: DateTime
}

input MenuDateMineCompoundUniqueInput {
  menuDate: DateTime!
  userId: String!
}

input MenuFilter {
  every: MenuWhereInput
  none: MenuWhereInput
  some: MenuWhereInput
}

input MenuIdUserIdCompoundUniqueInput {
  menuId: String!
  userId: String!
}

input MenuMineCompoundUniqueInput {
  id: String!
  userId: String!
}

input MenuScalarWhereInput {
  AND: [MenuScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  meals: MealFilter
  menuDate: DateTimeFilter
  NOT: [MenuScalarWhereInput!]
  OR: [MenuScalarWhereInput!]
  SavedMenus: SavedMenusFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input MenuUpdateInput {
  createdAt: DateTime
  default: DefaultMenuUpdateOneWithoutMenuInput
  id: String
  meals: MealUpdateManyWithoutMenusInput
  menuDate: DateTime
  SavedMenus: SavedMenusUpdateManyWithoutMenuInput
  tags: MenuUpdatetagsInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutMenusInput
}

input MenuUpdateManyDataInput {
  createdAt: DateTime
  id: String
  menuDate: DateTime
  tags: MenuUpdatetagsInput
  updatedAt: DateTime
}

input MenuUpdateManyWithoutMealsInput {
  connect: [MenuWhereUniqueInput!]
  create: [MenuCreateWithoutMealsInput!]
  delete: [MenuWhereUniqueInput!]
  deleteMany: [MenuScalarWhereInput!]
  disconnect: [MenuWhereUniqueInput!]
  set: [MenuWhereUniqueInput!]
  update: [MenuUpdateWithWhereUniqueWithoutMealsInput!]
  updateMany: [MenuUpdateManyWithWhereNestedInput!]
  upsert: [MenuUpsertWithWhereUniqueWithoutMealsInput!]
}

input MenuUpdateManyWithoutUserInput {
  connect: [MenuWhereUniqueInput!]
  create: [MenuCreateWithoutUserInput!]
  delete: [MenuWhereUniqueInput!]
  deleteMany: [MenuScalarWhereInput!]
  disconnect: [MenuWhereUniqueInput!]
  set: [MenuWhereUniqueInput!]
  update: [MenuUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [MenuUpdateManyWithWhereNestedInput!]
  upsert: [MenuUpsertWithWhereUniqueWithoutUserInput!]
}

input MenuUpdateManyWithWhereNestedInput {
  data: MenuUpdateManyDataInput!
  where: MenuScalarWhereInput!
}

input MenuUpdateOneRequiredWithoutDefaultInput {
  connect: MenuWhereUniqueInput
  create: MenuCreateWithoutDefaultInput
  update: MenuUpdateWithoutDefaultDataInput
  upsert: MenuUpsertWithoutDefaultInput
}

input MenuUpdateOneRequiredWithoutSavedMenusInput {
  connect: MenuWhereUniqueInput
  create: MenuCreateWithoutSavedMenusInput
  update: MenuUpdateWithoutSavedMenusDataInput
  upsert: MenuUpsertWithoutSavedMenusInput
}

input MenuUpdatetagsInput {
  set: [String!]
}

input MenuUpdateWithoutDefaultDataInput {
  createdAt: DateTime
  id: String
  meals: MealUpdateManyWithoutMenusInput
  menuDate: DateTime
  SavedMenus: SavedMenusUpdateManyWithoutMenuInput
  tags: MenuUpdatetagsInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutMenusInput
}

input MenuUpdateWithoutMealsDataInput {
  createdAt: DateTime
  default: DefaultMenuUpdateOneWithoutMenuInput
  id: String
  menuDate: DateTime
  SavedMenus: SavedMenusUpdateManyWithoutMenuInput
  tags: MenuUpdatetagsInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutMenusInput
}

input MenuUpdateWithoutSavedMenusDataInput {
  createdAt: DateTime
  default: DefaultMenuUpdateOneWithoutMenuInput
  id: String
  meals: MealUpdateManyWithoutMenusInput
  menuDate: DateTime
  tags: MenuUpdatetagsInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutMenusInput
}

input MenuUpdateWithoutUserDataInput {
  createdAt: DateTime
  default: DefaultMenuUpdateOneWithoutMenuInput
  id: String
  meals: MealUpdateManyWithoutMenusInput
  menuDate: DateTime
  SavedMenus: SavedMenusUpdateManyWithoutMenuInput
  tags: MenuUpdatetagsInput
  updatedAt: DateTime
}

input MenuUpdateWithWhereUniqueWithoutMealsInput {
  data: MenuUpdateWithoutMealsDataInput!
  where: MenuWhereUniqueInput!
}

input MenuUpdateWithWhereUniqueWithoutUserInput {
  data: MenuUpdateWithoutUserDataInput!
  where: MenuWhereUniqueInput!
}

input MenuUpsertWithoutDefaultInput {
  create: MenuCreateWithoutDefaultInput!
  update: MenuUpdateWithoutDefaultDataInput!
}

input MenuUpsertWithoutSavedMenusInput {
  create: MenuCreateWithoutSavedMenusInput!
  update: MenuUpdateWithoutSavedMenusDataInput!
}

input MenuUpsertWithWhereUniqueWithoutMealsInput {
  create: MenuCreateWithoutMealsInput!
  update: MenuUpdateWithoutMealsDataInput!
  where: MenuWhereUniqueInput!
}

input MenuUpsertWithWhereUniqueWithoutUserInput {
  create: MenuCreateWithoutUserInput!
  update: MenuUpdateWithoutUserDataInput!
  where: MenuWhereUniqueInput!
}

input MenuWhereInput {
  AND: [MenuWhereInput!]
  createdAt: DateTimeFilter
  default: DefaultMenuWhereInput
  id: StringFilter
  meals: MealFilter
  menuDate: DateTimeFilter
  NOT: [MenuWhereInput!]
  OR: [MenuWhereInput!]
  SavedMenus: SavedMenusFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input MenuWhereUniqueInput {
  id: String
  menuDateMine: MenuDateMineCompoundUniqueInput
  menuMine: MenuMineCompoundUniqueInput
}

type Mutation {
  createOneAddress(data: AddressCreateInput!): Address!
  createOneMeal(data: MealCreateInput!): Meal!
  createOneMenu(data: MenuCreateInput!): Menu!
  createOneOrder(data: OrderCreateInput!): Order!
  createOneOwnMeal(data: MealCreateInput!): Meal!
  createOneOwnMenu(data: MenuCreateInput!): Menu!
  createOneOwnOrder(data: OrderCreateInput!): Order!
  deleteOneMeal(where: MealWhereUniqueInput!): Meal
  deleteOneMenu(where: MenuWhereUniqueInput!): Menu
  deleteOneOrder(where: OrderWhereUniqueInput!): Order
  deleteOneOwnMeal(where: MealWhereUniqueInput!): Meal
  deleteOneOwnMenu(where: MenuWhereUniqueInput!): Menu
  deleteOneOwnOrder(where: OrderWhereUniqueInput!): Order
  deleteOneOwnUser(where: UserWhereUniqueInput!): User
  deleteOneUser(where: UserWhereUniqueInput!): User
  login(email: String!, password: String!): AuthPayload
  loginWithFaceBook(token: String!): AuthPayload
  loginWithGoogle(token: String!): AuthPayload
  logout: LogoutResponse
  revokeUserRefreshToken(user: UserWhereUniqueInput): User
  signup(email: String!, firstName: String, lastName: String, password: String!, roles: [Role!]): AuthPayload
  updateOneAddress(data: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address
  updateOneMeal(data: MealUpdateInput!, where: MealWhereUniqueInput!): Meal
  updateOneMenu(data: MenuUpdateInput!, where: MenuWhereUniqueInput!): Menu
  updateOneOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateOneOwnMeal(data: MealUpdateInput!, where: MealWhereUniqueInput!): Meal
  updateOneOwnMenu(data: MenuUpdateInput!, where: MenuWhereUniqueInput!): Menu
  updateOneOwnOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateOneOwnUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

input NullableDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Order {
  createdAt: DateTime!
  deliveryAddress: Address
  id: String!
  meals(after: MealOrderWhereUniqueInput, before: MealOrderWhereUniqueInput, first: Int, last: Int): [MealOrder!]!
  status: Status!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

enum OrderByArg {
  asc
  desc
}

input OrderCreateInput {
  createdAt: DateTime
  deliveryAddress: AddressCreateOneWithoutOrderInput
  id: String
  meals: MealOrderCreateManyWithoutOrderInput
  status: Status
  updatedAt: DateTime
  user: UserCreateOneWithoutOrdersInput!
}

input OrderCreateManyWithoutDeliveryAddressInput {
  connect: [OrderWhereUniqueInput!]
  create: [OrderCreateWithoutDeliveryAddressInput!]
}

input OrderCreateManyWithoutUserInput {
  connect: [OrderWhereUniqueInput!]
  create: [OrderCreateWithoutUserInput!]
}

input OrderCreateOneWithoutMealsInput {
  connect: OrderWhereUniqueInput
  create: OrderCreateWithoutMealsInput
}

input OrderCreateWithoutDeliveryAddressInput {
  createdAt: DateTime
  id: String
  meals: MealOrderCreateManyWithoutOrderInput
  status: Status
  updatedAt: DateTime
  user: UserCreateOneWithoutOrdersInput!
}

input OrderCreateWithoutMealsInput {
  createdAt: DateTime
  deliveryAddress: AddressCreateOneWithoutOrderInput
  id: String
  status: Status
  updatedAt: DateTime
  user: UserCreateOneWithoutOrdersInput!
}

input OrderCreateWithoutUserInput {
  createdAt: DateTime
  deliveryAddress: AddressCreateOneWithoutOrderInput
  id: String
  meals: MealOrderCreateManyWithoutOrderInput
  status: Status
  updatedAt: DateTime
}

input OrderFilter {
  every: OrderWhereInput
  none: OrderWhereInput
  some: OrderWhereInput
}

input OrderMineCompoundUniqueInput {
  id: String!
  userId: String!
}

input OrderScalarWhereInput {
  addressId: NullableStringFilter
  AND: [OrderScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  meals: MealOrderFilter
  NOT: [OrderScalarWhereInput!]
  OR: [OrderScalarWhereInput!]
  status: Status
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input OrderUpdateInput {
  createdAt: DateTime
  deliveryAddress: AddressUpdateOneWithoutOrderInput
  id: String
  meals: MealOrderUpdateManyWithoutOrderInput
  status: Status
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutOrdersInput
}

input OrderUpdateManyDataInput {
  createdAt: DateTime
  id: String
  status: Status
  updatedAt: DateTime
}

input OrderUpdateManyWithoutDeliveryAddressInput {
  connect: [OrderWhereUniqueInput!]
  create: [OrderCreateWithoutDeliveryAddressInput!]
  delete: [OrderWhereUniqueInput!]
  deleteMany: [OrderScalarWhereInput!]
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutDeliveryAddressInput!]
  updateMany: [OrderUpdateManyWithWhereNestedInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutDeliveryAddressInput!]
}

input OrderUpdateManyWithoutUserInput {
  connect: [OrderWhereUniqueInput!]
  create: [OrderCreateWithoutUserInput!]
  delete: [OrderWhereUniqueInput!]
  deleteMany: [OrderScalarWhereInput!]
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [OrderUpdateManyWithWhereNestedInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutUserInput!]
}

input OrderUpdateManyWithWhereNestedInput {
  data: OrderUpdateManyDataInput!
  where: OrderScalarWhereInput!
}

input OrderUpdateOneRequiredWithoutMealsInput {
  connect: OrderWhereUniqueInput
  create: OrderCreateWithoutMealsInput
  update: OrderUpdateWithoutMealsDataInput
  upsert: OrderUpsertWithoutMealsInput
}

input OrderUpdateWithoutDeliveryAddressDataInput {
  createdAt: DateTime
  id: String
  meals: MealOrderUpdateManyWithoutOrderInput
  status: Status
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutOrdersInput
}

input OrderUpdateWithoutMealsDataInput {
  createdAt: DateTime
  deliveryAddress: AddressUpdateOneWithoutOrderInput
  id: String
  status: Status
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutOrdersInput
}

input OrderUpdateWithoutUserDataInput {
  createdAt: DateTime
  deliveryAddress: AddressUpdateOneWithoutOrderInput
  id: String
  meals: MealOrderUpdateManyWithoutOrderInput
  status: Status
  updatedAt: DateTime
}

input OrderUpdateWithWhereUniqueWithoutDeliveryAddressInput {
  data: OrderUpdateWithoutDeliveryAddressDataInput!
  where: OrderWhereUniqueInput!
}

input OrderUpdateWithWhereUniqueWithoutUserInput {
  data: OrderUpdateWithoutUserDataInput!
  where: OrderWhereUniqueInput!
}

input OrderUpsertWithoutMealsInput {
  create: OrderCreateWithoutMealsInput!
  update: OrderUpdateWithoutMealsDataInput!
}

input OrderUpsertWithWhereUniqueWithoutDeliveryAddressInput {
  create: OrderCreateWithoutDeliveryAddressInput!
  update: OrderUpdateWithoutDeliveryAddressDataInput!
  where: OrderWhereUniqueInput!
}

input OrderUpsertWithWhereUniqueWithoutUserInput {
  create: OrderCreateWithoutUserInput!
  update: OrderUpdateWithoutUserDataInput!
  where: OrderWhereUniqueInput!
}

input OrderWhereInput {
  addressId: NullableStringFilter
  AND: [OrderWhereInput!]
  createdAt: DateTimeFilter
  deliveryAddress: AddressWhereInput
  id: StringFilter
  meals: MealOrderFilter
  NOT: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  status: Status
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input OrderWhereUniqueInput {
  id: String
  orderMine: OrderMineCompoundUniqueInput
}

type Query {
  defaultAddress(where: DefaultAddressWhereUniqueInput!): DefaultAddress
  defaultMenu(where: DefaultMenuWhereUniqueInput!): DefaultMenu
  defaultMenus(after: DefaultMenuWhereUniqueInput, before: DefaultMenuWhereUniqueInput, first: Int, last: Int): [DefaultMenu!]!
  me: User
  meal(where: MealWhereUniqueInput!): Meal
  meals(after: MealWhereUniqueInput, before: MealWhereUniqueInput, first: Int, last: Int, where: MealWhereInput): [Meal!]!
  menu(where: MenuWhereUniqueInput!): Menu
  menuMeals(after: MealWhereUniqueInput, before: MealWhereUniqueInput, first: Int, last: Int, where: MealWhereInput): [Meal!]!
  menus(after: MenuWhereUniqueInput, before: MenuWhereUniqueInput, first: Int, last: Int, where: MenuWhereInput): [Menu!]!
  order(where: OrderWhereUniqueInput!): Order
  orders(after: OrderWhereUniqueInput, before: OrderWhereUniqueInput, first: Int, last: Int, where: OrderWhereInput): [Order!]!
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, orderBy: UserOrderByInput, where: UserWhereInput): [User!]!
}

enum Role {
  ADMIN
  CATERER
}

input SavedMenusCreateManyWithoutMenuInput {
  connect: [SavedMenusWhereUniqueInput!]
  create: [SavedMenusCreateWithoutMenuInput!]
}

input SavedMenusCreateManyWithoutUserInput {
  connect: [SavedMenusWhereUniqueInput!]
  create: [SavedMenusCreateWithoutUserInput!]
}

input SavedMenusCreateWithoutMenuInput {
  createdAt: DateTime
  user: UserCreateOneWithoutSavedMenusInput!
}

input SavedMenusCreateWithoutUserInput {
  createdAt: DateTime
  menu: MenuCreateOneWithoutSavedMenusInput!
}

input SavedMenusFilter {
  every: SavedMenusWhereInput
  none: SavedMenusWhereInput
  some: SavedMenusWhereInput
}

input SavedMenusScalarWhereInput {
  AND: [SavedMenusScalarWhereInput!]
  createdAt: DateTimeFilter
  menuId: StringFilter
  NOT: [SavedMenusScalarWhereInput!]
  OR: [SavedMenusScalarWhereInput!]
  userId: StringFilter
}

input SavedMenusUpdateManyDataInput {
  createdAt: DateTime
}

input SavedMenusUpdateManyWithoutMenuInput {
  connect: [SavedMenusWhereUniqueInput!]
  create: [SavedMenusCreateWithoutMenuInput!]
  delete: [SavedMenusWhereUniqueInput!]
  deleteMany: [SavedMenusScalarWhereInput!]
  disconnect: [SavedMenusWhereUniqueInput!]
  set: [SavedMenusWhereUniqueInput!]
  update: [SavedMenusUpdateWithWhereUniqueWithoutMenuInput!]
  updateMany: [SavedMenusUpdateManyWithWhereNestedInput!]
  upsert: [SavedMenusUpsertWithWhereUniqueWithoutMenuInput!]
}

input SavedMenusUpdateManyWithoutUserInput {
  connect: [SavedMenusWhereUniqueInput!]
  create: [SavedMenusCreateWithoutUserInput!]
  delete: [SavedMenusWhereUniqueInput!]
  deleteMany: [SavedMenusScalarWhereInput!]
  disconnect: [SavedMenusWhereUniqueInput!]
  set: [SavedMenusWhereUniqueInput!]
  update: [SavedMenusUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [SavedMenusUpdateManyWithWhereNestedInput!]
  upsert: [SavedMenusUpsertWithWhereUniqueWithoutUserInput!]
}

input SavedMenusUpdateManyWithWhereNestedInput {
  data: SavedMenusUpdateManyDataInput!
  where: SavedMenusScalarWhereInput!
}

input SavedMenusUpdateWithoutMenuDataInput {
  createdAt: DateTime
  user: UserUpdateOneRequiredWithoutSavedMenusInput
}

input SavedMenusUpdateWithoutUserDataInput {
  createdAt: DateTime
  menu: MenuUpdateOneRequiredWithoutSavedMenusInput
}

input SavedMenusUpdateWithWhereUniqueWithoutMenuInput {
  data: SavedMenusUpdateWithoutMenuDataInput!
  where: SavedMenusWhereUniqueInput!
}

input SavedMenusUpdateWithWhereUniqueWithoutUserInput {
  data: SavedMenusUpdateWithoutUserDataInput!
  where: SavedMenusWhereUniqueInput!
}

input SavedMenusUpsertWithWhereUniqueWithoutMenuInput {
  create: SavedMenusCreateWithoutMenuInput!
  update: SavedMenusUpdateWithoutMenuDataInput!
  where: SavedMenusWhereUniqueInput!
}

input SavedMenusUpsertWithWhereUniqueWithoutUserInput {
  create: SavedMenusCreateWithoutUserInput!
  update: SavedMenusUpdateWithoutUserDataInput!
  where: SavedMenusWhereUniqueInput!
}

input SavedMenusWhereInput {
  AND: [SavedMenusWhereInput!]
  createdAt: DateTimeFilter
  menu: MenuWhereInput
  menuId: StringFilter
  NOT: [SavedMenusWhereInput!]
  OR: [SavedMenusWhereInput!]
  user: UserWhereInput
  userId: StringFilter
}

input SavedMenusWhereUniqueInput {
  menuId_userId: MenuIdUserIdCompoundUniqueInput
}

enum Status {
  CANCELLED
  DISPATCHED
  FULFILLED
  PENDING
  PROCESSING
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  addresses(first: Int): [Address!]!
  createdAt: DateTime!
  defaultAddress: DefaultAddress
  defaultMenu: DefaultMenu
  email: String!
  firstName: String
  id: String!
  lastName: String
  meals(after: MealWhereUniqueInput, before: MealWhereUniqueInput, first: Int, last: Int): [Meal!]!
  orders(after: OrderWhereUniqueInput, before: OrderWhereUniqueInput, first: Int, last: Int): [Order!]!
  roles: [Role!]!
  tokenVersion: String!
  updatedAt: DateTime!
}

input UserCreateOneWithoutAddressesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutAddressesInput
}

input UserCreateOneWithoutDefaultAddressInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutDefaultAddressInput
}

input UserCreateOneWithoutDefaultMenuInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutDefaultMenuInput
}

input UserCreateOneWithoutMealsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutMealsInput
}

input UserCreateOneWithoutMenusInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutMenusInput
}

input UserCreateOneWithoutOrdersInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutOrdersInput
}

input UserCreateOneWithoutSavedMenusInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutSavedMenusInput
}

input UserCreaterolesInput {
  set: [Role!]
}

input UserCreateWithoutAddressesInput {
  createdAt: DateTime
  defaultAddress: DefaultAddressCreateOneWithoutUserInput
  defaultMenu: DefaultMenuCreateOneWithoutUserInput
  email: String!
  facebookId: String
  firstName: String
  googleId: String
  id: String
  lastName: String
  meals: MealCreateManyWithoutUserInput
  menus: MenuCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  password: String
  picture: Json
  roles: UserCreaterolesInput
  savedMenus: SavedMenusCreateManyWithoutUserInput
  tokenVersion: String
  updatedAt: DateTime
}

input UserCreateWithoutDefaultAddressInput {
  addresses: AddressCreateManyWithoutUserInput
  createdAt: DateTime
  defaultMenu: DefaultMenuCreateOneWithoutUserInput
  email: String!
  facebookId: String
  firstName: String
  googleId: String
  id: String
  lastName: String
  meals: MealCreateManyWithoutUserInput
  menus: MenuCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  password: String
  picture: Json
  roles: UserCreaterolesInput
  savedMenus: SavedMenusCreateManyWithoutUserInput
  tokenVersion: String
  updatedAt: DateTime
}

input UserCreateWithoutDefaultMenuInput {
  addresses: AddressCreateManyWithoutUserInput
  createdAt: DateTime
  defaultAddress: DefaultAddressCreateOneWithoutUserInput
  email: String!
  facebookId: String
  firstName: String
  googleId: String
  id: String
  lastName: String
  meals: MealCreateManyWithoutUserInput
  menus: MenuCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  password: String
  picture: Json
  roles: UserCreaterolesInput
  savedMenus: SavedMenusCreateManyWithoutUserInput
  tokenVersion: String
  updatedAt: DateTime
}

input UserCreateWithoutMealsInput {
  addresses: AddressCreateManyWithoutUserInput
  createdAt: DateTime
  defaultAddress: DefaultAddressCreateOneWithoutUserInput
  defaultMenu: DefaultMenuCreateOneWithoutUserInput
  email: String!
  facebookId: String
  firstName: String
  googleId: String
  id: String
  lastName: String
  menus: MenuCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  password: String
  picture: Json
  roles: UserCreaterolesInput
  savedMenus: SavedMenusCreateManyWithoutUserInput
  tokenVersion: String
  updatedAt: DateTime
}

input UserCreateWithoutMenusInput {
  addresses: AddressCreateManyWithoutUserInput
  createdAt: DateTime
  defaultAddress: DefaultAddressCreateOneWithoutUserInput
  defaultMenu: DefaultMenuCreateOneWithoutUserInput
  email: String!
  facebookId: String
  firstName: String
  googleId: String
  id: String
  lastName: String
  meals: MealCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  password: String
  picture: Json
  roles: UserCreaterolesInput
  savedMenus: SavedMenusCreateManyWithoutUserInput
  tokenVersion: String
  updatedAt: DateTime
}

input UserCreateWithoutOrdersInput {
  addresses: AddressCreateManyWithoutUserInput
  createdAt: DateTime
  defaultAddress: DefaultAddressCreateOneWithoutUserInput
  defaultMenu: DefaultMenuCreateOneWithoutUserInput
  email: String!
  facebookId: String
  firstName: String
  googleId: String
  id: String
  lastName: String
  meals: MealCreateManyWithoutUserInput
  menus: MenuCreateManyWithoutUserInput
  password: String
  picture: Json
  roles: UserCreaterolesInput
  savedMenus: SavedMenusCreateManyWithoutUserInput
  tokenVersion: String
  updatedAt: DateTime
}

input UserCreateWithoutSavedMenusInput {
  addresses: AddressCreateManyWithoutUserInput
  createdAt: DateTime
  defaultAddress: DefaultAddressCreateOneWithoutUserInput
  defaultMenu: DefaultMenuCreateOneWithoutUserInput
  email: String!
  facebookId: String
  firstName: String
  googleId: String
  id: String
  lastName: String
  meals: MealCreateManyWithoutUserInput
  menus: MenuCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  password: String
  picture: Json
  roles: UserCreaterolesInput
  tokenVersion: String
  updatedAt: DateTime
}

input UserOrderByInput {
  createdAt: OrderByArg
  email: OrderByArg
  facebookId: OrderByArg
  firstName: OrderByArg
  googleId: OrderByArg
  id: OrderByArg
  lastName: OrderByArg
  password: OrderByArg
  picture: OrderByArg
  tokenVersion: OrderByArg
  updatedAt: OrderByArg
}

input UserUpdateInput {
  addresses: AddressUpdateManyWithoutUserInput
  createdAt: DateTime
  defaultAddress: DefaultAddressUpdateOneWithoutUserInput
  defaultMenu: DefaultMenuUpdateOneWithoutUserInput
  email: String
  facebookId: String
  firstName: String
  googleId: String
  id: String
  lastName: String
  meals: MealUpdateManyWithoutUserInput
  menus: MenuUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  password: String
  picture: Json
  roles: UserUpdaterolesInput
  savedMenus: SavedMenusUpdateManyWithoutUserInput
  tokenVersion: String
  updatedAt: DateTime
}

input UserUpdateOneRequiredWithoutAddressesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutAddressesInput
  update: UserUpdateWithoutAddressesDataInput
  upsert: UserUpsertWithoutAddressesInput
}

input UserUpdateOneRequiredWithoutDefaultAddressInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutDefaultAddressInput
  update: UserUpdateWithoutDefaultAddressDataInput
  upsert: UserUpsertWithoutDefaultAddressInput
}

input UserUpdateOneRequiredWithoutDefaultMenuInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutDefaultMenuInput
  update: UserUpdateWithoutDefaultMenuDataInput
  upsert: UserUpsertWithoutDefaultMenuInput
}

input UserUpdateOneRequiredWithoutMealsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutMealsInput
  update: UserUpdateWithoutMealsDataInput
  upsert: UserUpsertWithoutMealsInput
}

input UserUpdateOneRequiredWithoutMenusInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutMenusInput
  update: UserUpdateWithoutMenusDataInput
  upsert: UserUpsertWithoutMenusInput
}

input UserUpdateOneRequiredWithoutOrdersInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutOrdersInput
  update: UserUpdateWithoutOrdersDataInput
  upsert: UserUpsertWithoutOrdersInput
}

input UserUpdateOneRequiredWithoutSavedMenusInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutSavedMenusInput
  update: UserUpdateWithoutSavedMenusDataInput
  upsert: UserUpsertWithoutSavedMenusInput
}

input UserUpdaterolesInput {
  set: [Role!]
}

input UserUpdateWithoutAddressesDataInput {
  createdAt: DateTime
  defaultAddress: DefaultAddressUpdateOneWithoutUserInput
  defaultMenu: DefaultMenuUpdateOneWithoutUserInput
  email: String
  facebookId: String
  firstName: String
  googleId: String
  id: String
  lastName: String
  meals: MealUpdateManyWithoutUserInput
  menus: MenuUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  password: String
  picture: Json
  roles: UserUpdaterolesInput
  savedMenus: SavedMenusUpdateManyWithoutUserInput
  tokenVersion: String
  updatedAt: DateTime
}

input UserUpdateWithoutDefaultAddressDataInput {
  addresses: AddressUpdateManyWithoutUserInput
  createdAt: DateTime
  defaultMenu: DefaultMenuUpdateOneWithoutUserInput
  email: String
  facebookId: String
  firstName: String
  googleId: String
  id: String
  lastName: String
  meals: MealUpdateManyWithoutUserInput
  menus: MenuUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  password: String
  picture: Json
  roles: UserUpdaterolesInput
  savedMenus: SavedMenusUpdateManyWithoutUserInput
  tokenVersion: String
  updatedAt: DateTime
}

input UserUpdateWithoutDefaultMenuDataInput {
  addresses: AddressUpdateManyWithoutUserInput
  createdAt: DateTime
  defaultAddress: DefaultAddressUpdateOneWithoutUserInput
  email: String
  facebookId: String
  firstName: String
  googleId: String
  id: String
  lastName: String
  meals: MealUpdateManyWithoutUserInput
  menus: MenuUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  password: String
  picture: Json
  roles: UserUpdaterolesInput
  savedMenus: SavedMenusUpdateManyWithoutUserInput
  tokenVersion: String
  updatedAt: DateTime
}

input UserUpdateWithoutMealsDataInput {
  addresses: AddressUpdateManyWithoutUserInput
  createdAt: DateTime
  defaultAddress: DefaultAddressUpdateOneWithoutUserInput
  defaultMenu: DefaultMenuUpdateOneWithoutUserInput
  email: String
  facebookId: String
  firstName: String
  googleId: String
  id: String
  lastName: String
  menus: MenuUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  password: String
  picture: Json
  roles: UserUpdaterolesInput
  savedMenus: SavedMenusUpdateManyWithoutUserInput
  tokenVersion: String
  updatedAt: DateTime
}

input UserUpdateWithoutMenusDataInput {
  addresses: AddressUpdateManyWithoutUserInput
  createdAt: DateTime
  defaultAddress: DefaultAddressUpdateOneWithoutUserInput
  defaultMenu: DefaultMenuUpdateOneWithoutUserInput
  email: String
  facebookId: String
  firstName: String
  googleId: String
  id: String
  lastName: String
  meals: MealUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  password: String
  picture: Json
  roles: UserUpdaterolesInput
  savedMenus: SavedMenusUpdateManyWithoutUserInput
  tokenVersion: String
  updatedAt: DateTime
}

input UserUpdateWithoutOrdersDataInput {
  addresses: AddressUpdateManyWithoutUserInput
  createdAt: DateTime
  defaultAddress: DefaultAddressUpdateOneWithoutUserInput
  defaultMenu: DefaultMenuUpdateOneWithoutUserInput
  email: String
  facebookId: String
  firstName: String
  googleId: String
  id: String
  lastName: String
  meals: MealUpdateManyWithoutUserInput
  menus: MenuUpdateManyWithoutUserInput
  password: String
  picture: Json
  roles: UserUpdaterolesInput
  savedMenus: SavedMenusUpdateManyWithoutUserInput
  tokenVersion: String
  updatedAt: DateTime
}

input UserUpdateWithoutSavedMenusDataInput {
  addresses: AddressUpdateManyWithoutUserInput
  createdAt: DateTime
  defaultAddress: DefaultAddressUpdateOneWithoutUserInput
  defaultMenu: DefaultMenuUpdateOneWithoutUserInput
  email: String
  facebookId: String
  firstName: String
  googleId: String
  id: String
  lastName: String
  meals: MealUpdateManyWithoutUserInput
  menus: MenuUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  password: String
  picture: Json
  roles: UserUpdaterolesInput
  tokenVersion: String
  updatedAt: DateTime
}

input UserUpsertWithoutAddressesInput {
  create: UserCreateWithoutAddressesInput!
  update: UserUpdateWithoutAddressesDataInput!
}

input UserUpsertWithoutDefaultAddressInput {
  create: UserCreateWithoutDefaultAddressInput!
  update: UserUpdateWithoutDefaultAddressDataInput!
}

input UserUpsertWithoutDefaultMenuInput {
  create: UserCreateWithoutDefaultMenuInput!
  update: UserUpdateWithoutDefaultMenuDataInput!
}

input UserUpsertWithoutMealsInput {
  create: UserCreateWithoutMealsInput!
  update: UserUpdateWithoutMealsDataInput!
}

input UserUpsertWithoutMenusInput {
  create: UserCreateWithoutMenusInput!
  update: UserUpdateWithoutMenusDataInput!
}

input UserUpsertWithoutOrdersInput {
  create: UserCreateWithoutOrdersInput!
  update: UserUpdateWithoutOrdersDataInput!
}

input UserUpsertWithoutSavedMenusInput {
  create: UserCreateWithoutSavedMenusInput!
  update: UserUpdateWithoutSavedMenusDataInput!
}

input UserWhereInput {
  addresses: AddressFilter
  AND: [UserWhereInput!]
  createdAt: DateTimeFilter
  defaultAddress: DefaultAddressWhereInput
  defaultMenu: DefaultMenuWhereInput
  email: StringFilter
  facebookId: NullableStringFilter
  firstName: NullableStringFilter
  googleId: NullableStringFilter
  id: StringFilter
  lastName: NullableStringFilter
  meals: MealFilter
  menus: MenuFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  orders: OrderFilter
  password: NullableStringFilter
  savedMenus: SavedMenusFilter
  tokenVersion: StringFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  email: String
  facebookId: String
  googleId: String
  id: String
}
