generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = "***"
}

model Address {
  areaCode  Int
  createdAt DateTime @default(now())
  id        String   @default(cuid()) @id
  lga       String
  state     String
  street1   String
  street2   String?
  updatedAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@unique([id, userId], name: "addressMine")
}

model DefaultAddress {
  id        String   @default(cuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  addressId String
  address   Address  @relation(fields: [addressId, userId], references: [id, userId])
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
}

model Meal {
  createdAt   DateTime        @default(now())
  deletedAt   DateTime?
  description String
  id          String          @default(cuid()) @id
  imageUrl    String
  price       Int
  tags        String[]
  title       String
  updatedAt   DateTime        @default(now())
  userId      String
  user        User            @relation(fields: [userId], references: [id])
  orders      MealOrder[]
  menus       Menu[]          @relation("MealMenu", references: [id])

  @@unique([id, userId], name: "mealMine")
}

model MealOrder {
  createdAt DateTime @default(now())
  id        String   @default(cuid()) @id
  mealId    String
  orderId   String
  quantity  Int      @default(1)
  updatedAt DateTime @default(now())
  meal      Meal     @relation(fields: [mealId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id])

  @@unique([mealId, orderId], name: "meal_order")
}

model Menu {
  createdAt DateTime @default(now())
  id        String   @default(cuid()) @id
  menuDate  DateTime
  updatedAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  meals     Meal[]   @relation("MealMenu", references: [id])

  @@unique([menuDate, userId], name: "menuMine")
}

model Order {
  createdAt DateTime        @default(now())
  id        String          @default(cuid()) @id
  status    Status          @default(PENDING)
  updatedAt DateTime        @default(now())
  userId    String
  user      User            @relation(fields: [userId], references: [id])
  meals     MealOrder[]

  @@unique([id, userId], name: "orderMine")
}

model User {
  createdAt      DateTime        @default(now())
  email          String          @unique
  firstName      String?
  id             String          @default(cuid()) @id
  facebookId     String?         @unique
  googleId       String?         @unique
  lastName       String?
  tokenVersion   String          @default(cuid())
  // Json type is optimal but will use String for now
  // see https://github.com/graphql-nexus/nexus/issues/947
  picture        String?
  password       String?
  roles          Role[]
  updatedAt      DateTime        @default(now())
  defaultAddress DefaultAddress?
  addresses      Address[]
  meals          Meal[]
  menus          Menu[]
  orders         Order[]
}

enum Role {
  ADMIN
  CATERER
}

enum Status {
  DISPATCHED
  FULFILLED
  PENDING
  PROCESSING
}
