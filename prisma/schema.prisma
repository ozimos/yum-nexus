generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Address {
  areaCode       Int
  createdAt      DateTime @default(now())
  id             String   @id @default(cuid())
  lga            String
  state          String
  street1        String
  street2        String
  updatedAt      DateTime @default(now())
  userId         String
  user           User     @relation(fields: [userId], references: [id])

  @@unique([id, userId], name: "addressMine")
}

model DefaultAddress {
  id        String   @default(cuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  addressId String
  address   Address  @relation(fields: [addressId, userId], references: [id, userId])
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
}

model Meal {
  createdAt     DateTime        @default(now())
  deletedAt     DateTime?
  description   String
  id            String          @id @default(cuid())
  imageUrl      String
  price         Int
  tags          String[]
  title         String
  updatedAt     DateTime        @default(now())
  userId        String
  user          User            @relation(fields: [userId], references: [id])
  orders        MealsOnOrders[]    
  menus         Menu[]          @relation("MealMenu", references: [id])

  @@unique([id, userId], name: "mealMine")
  @@unique([title, userId], name: "userTitle")
  @@unique([title, userId, deletedAt], name: "userTitleDeletedAt")
}

model MealsOnOrders {
  createdAt DateTime @default(now())
  id        String   @id   @default(cuid())
  mealId    String
  orderId   String
  quantity  Int      @default(1)
  updatedAt DateTime @default(now())
  meal      Meal     @relation(fields: [mealId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id])

  @@unique([mealId, orderId], name: "mealsOnOrders")
}

model Menu {
  createdAt DateTime @default(now())
  id        String   @id   @default(cuid())
  menuDate  DateTime
  updatedAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  meals     Meal[]   @relation("MealMenu", references: [id])
  
  @@unique([menuDate, userId], name: "menuMine")
}

model Order {
  createdAt     DateTime        @default(now())
  id            String          @id  @default(cuid())
  status        Status          @default(PENDING)
  updatedAt     DateTime        @default(now())
  userId        String
  user          User            @relation(fields: [userId], references: [id])
  meals         MealsOnOrders[]    

  @@unique([id, userId], name: "orderMine")
}

model User {
  createdAt DateTime  @default(now())
  email     String    @unique
  firstName String
  id        String    @id  @default(cuid())
  lastName  String
  password  String
  role      Role      @default(USER)
  updatedAt DateTime  @default(now())
  defaultAddress DefaultAddress?
  addresses Address[]
  meals     Meal[]
  menus     Menu[]
  orders    Order[]
}

enum Role {
  ADMIN
  CATERER
  USER
}

enum Status {
  DISPATCHED
  FULFILLED
  PENDING
  PROCESSING
}
